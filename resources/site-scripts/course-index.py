#!/usr/bin/env python3
#
# Generate document index in README.md
#
# - Scan all files under docs/
# - If the file extension is .note
#   - If .note file contains a URL, generate markdown link to that URL
#   - Else for link to CKA notes using the filename as the leaf
# - Else render direct link to .md file

from pathlib import Path
from urllib.parse import urlparse
import re
from typing import List

BEGIN_MARKER = "[//]: # (BEGIN Generated by resources/site-scripts/course-index.py)"
END_MARKER = "[//]: # (END Generated by resources/site-scripts/course-index.py)"

NOTE_BASE_URL = "https://notes.kodekloud.com/docs/CKA-Certification-Course-Certified-Kubernetes-Administrator"

def repo_root() -> Path:
    """
    Determine root directory of this git repo
    """
    dir = Path(__file__).resolve().parent
    root = Path.cwd().root
    while True:
        if (dir / ".git").exists():
            break
        dir = dir.parent
        if dir == root:
            raise Exception("Project root (directory containing .git) not found!")
    return dir

def strip_number_prefix(name: str) -> str:
    """
    Remove numeric prefix from a name
    """
    parts = name.split('-', 1)
    return parts[1] if len(parts) > 1 else name

def format_link_line(index, filename, url, is_external=False):
    """
    Construct the full markdown line with ðŸ”— (external link) suffix when target is KK notes.
    """
    clean_name = strip_number_prefix(filename)
    title = Path(clean_name).stem.replace('-', ' ')

    # Remove trailing 'optional' or '-optional' (case-insensitive)
    title = re.sub(r'[\s-]?optional$', '', title, flags=re.IGNORECASE).strip()

    link = f"[{index:02d} {title}]({url})"
    return f"- {link} ðŸ”—" if is_external else f"- {link}"

def is_valid_url(url: str) -> bool:
    """
    Test if given string contains a valid URL
    """
    try:
        parsed = urlparse(url)
        return all([parsed.scheme in ("http", "https"), parsed.netloc])
    except Exception:
        return False

def generate_index(docs_path: Path) -> List[str]:
    """
    Create the markdown index to be inserted into the README
    as a list of lines
    """
    lines = [
        "",
        "ðŸ”— suffix denotes an external link to [notes.kodekloud.com](https://notes.kodekloud.com/)",
        ""
    ]

    # Iterate entries in directory "docs_path" which is realistically docs/
    for section_dir in sorted(docs_path.iterdir()):
        if not section_dir.is_dir():
            # Ignore any files in this directory
            continue

        if (section_dir / ".noindex").exists():
            # Ignore this directory if it contains .noindex file
            continue

        # Get all files in the directory e.g. docs/000-Introduction
        section_files = sorted(section_dir.glob('*.*'))
        raw_section_name = section_dir.name
        clean_section_name = strip_number_prefix(raw_section_name).replace(' ', '%20')
        pretty_section_title = strip_number_prefix(raw_section_name).replace('-', ' ', 1)

        lines.append(f"<details>")
        lines.append(f"<summary><strong>{pretty_section_title}</strong></summary>\n")
        lines.append("")

        for idx, file in enumerate(section_files, start=1):
            filename = file.name
            ext = file.suffix

            if ext == ".note":
                # File is a .note file
                link_url = None
                try:
                    # Read file to see if it contains a URL to use.
                    with open(file, "r", encoding="utf-8") as f:
                        first_line = f.readline().strip()
                        if first_line:
                            if is_valid_url(first_line):
                                link_url = first_line
                            else:
                                print(f"[WARN] Invalid URL in {file}: {first_line}")
                except Exception as e:
                    print(f"[ERROR] Could not read .note file: {file} ({e})")

                if not link_url:
                    # No URL in file. Use filename to create a URL to CKA notes
                    clean_filename = strip_number_prefix(filename)
                    stem = Path(clean_filename).stem.replace(' ', '%20')
                    link_url = f"{NOTE_BASE_URL}/{clean_section_name}/{stem}"

                link_line = format_link_line(idx, filename, link_url, is_external=True)
            else:
                # It is a markdown file. Link directly to it
                url = f"docs/{raw_section_name}/{filename}"
                link_line = format_link_line(idx, filename, url)

            lines.append(link_line)

        lines.append("\n</details>\n")

    return "\n".join(lines)

def insert_index_into_readme(readme_path: Path, index_content: List[str]) -> None:
    """
    Insert the content into README in between the two comment markers, replacing
    whatever was there before.
    """
    with open(readme_path, "r", encoding="utf-8") as f:
        readme = f.read()

    pattern = re.compile(
        rf"({re.escape(BEGIN_MARKER)}\n)(.*?)(\n{re.escape(END_MARKER)})",
        re.DOTALL
    )

    new_content = pattern.sub(rf"\1{index_content}\3", readme)

    with open(readme_path, "w", encoding="utf-8") as f:
        f.write(new_content)

if __name__ == "__main__":
    base_dir = repo_root()
    docs_dir = base_dir / "docs"
    readme_path = base_dir / "README.md"

    index_content = generate_index(docs_dir)
    insert_index_into_readme(readme_path, index_content)